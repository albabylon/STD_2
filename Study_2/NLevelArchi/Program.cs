using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NLevelArchi
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // N-уровневая архитектура

            // Преимущества:
            // Простота управления каждым уровнем - так как каждый уровень, в многоуровневой архитектуре, независим, то и управление данным уровнем осуществляется безболезненно для остальных.
            // Слабая связность - новая функция просто добавляется на необходимый нам уровень без изменений в других уровнях приложения
            // Простота переиспользования уровней - поскольку приложение разделено на независимые уровни, вы можете легко повторно использовать каждый уровень для других программных проектов
            // Командная работа - каждый уровень может разрабатываться отдельными группами разработчиков.

            // Самый частый случай многоуровневой архитектуры, используемый на практике — это ТРЕХУРОВНЕВАЯ АРХИТЕКТУРА.
            // Слой клиента, он же уровень презентации, отвечает за логику отображения приложения.
            // Слой логики приложения, он же уровень бизнес-логики, отвечает за бизнес-логику в нашем приложении.
            // Слой данных, он же уровень доступа к базе данных, отвечает за хранение и извлечение данных из БД.
        }
    }
}
