using Patterns_5_BehavioralP.Strategy.StrategyRealExample;

namespace Patterns_5_BehavioralP
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // КОМАНДА (COMMAND) - позволяет нам превратить запросы в объекты и передавать их потом как аргументы при вызове методов.
            // Применение:
            // 1 Нам надо передать в виде параметров какие-то действия, и в ответ мы должны получить другие действия. То есть нам нужно получить обратный ответ.
            // 2 Нам нужна очередь запросов, а также возможность их отмены.
            // 3 Нам нужно контролировать изменения в логах и отслеживать поведение нашей системы. Это нам также поможет восстановить систему в случае сбоев.

            // СТРАТЕГИЯ (STRATEGY) - под Стратегией здесь понимается некий набор (или семейство) схожих алгоритмов, которые помещаются (инкапсулируются)
            // в классе, и могут потом взаимозаменяться во время исполнения программы.
            // Применение:
            // 1 У нас есть несколько похожих родственных классов, отличающихся поведением.
            // Тогда мы можем сделать один основной класс, а эти различающиеся варианты поведения вынести в отдельные классы, и применять по мере необходимости.
            // 2 У нас есть несколько вариантов алгоритмов, которые мы можем менять в зависимости от условий
            // 3 Во время выполнения программы нам нужно менять поведение объектов.
            // 4 Класс, в котором определен функционал, не должен ничего знать о реализации.

            // Подключаем котел на газу
            var boiler = new Boiler(30, "Bosch", new GasHeater());
            // Запускаем
            boiler.Start();

            // газ закончился. Переключаемся на электричество
            boiler.Heater = new ElectricHeater();
            // Запускаем
            boiler.Start();
        }
    }
}
