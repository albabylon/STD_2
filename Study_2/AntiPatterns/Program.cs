using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AntiPatterns
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // Архитектурные (Architectural anti-patterns) - Это ошибки, возникающие при проектировании систем.
            // Их могут допускать как системные архитекторы, так и разработчики уровня Middle и Middle +.

            // Разработческие (Development anti-patterns) - Паттерны, которые могут возникнуть у программистов всех уровней
            // непосредственно при написании кода.
        }


        // ПРЕЖДЕВРЕМЕННАЯ ОПТИМИЗАЦИЯ - Проще говоря, при написании кода вам стоит как можно быстрее перейти непосредственно к профилированию,
        // и получить реальную информацию об узких местах, вместо того чтобы пытаться предугадать это.

        // ЗОЛОТОЙ МОЛОТОК (если у вас есть молоток, каждая проблема выглядит как гвоздь) - Как правило, это выражается в постоянном использовании
        // одного и того же типового решения для схожих (и не очень) задач.

        // ИЗОБРЕТЕНИЕ ВЕЛОСИПЕДА -  большинство задач в том или ином виде уже решались, и стоит всегда начинать с поиска готового решения.
        // Но тут тоже важно не увлекаться и не скатываться в программирование копипастом, о котором дальше.

        // КОПИПАСТ - не копировать бездумно. При решении небольших задач в вашем проекте сразу закладывайте модульность,
        // чтобы увеличить возможность переиспользования уже написанного кода без копипасты.

        // БОЖЕСТВЕННЫЙ ОБЪЕКТ (MASTER OBJECT) - Основой системы служит один монструозный класс, который отвечает за всё и вся. Естественно, он обрастает связями и зависимостям,
        // с ним очень сложно работать и почти невозможно рефакторить (давая писать код рахным разрабам этого можномизбежать и добиться большей модульности сразу)

        // ИЗБЫТОЧНАЯ СЛОЖНОСТЬ - Простые системы всегда стабильнее сложных (при избыточном и неуместном применении паттернов. также это могут быть ненужные проверки в коде на всякие малозначительные условия)

        // СПАГЕТТИ-КОД - Большое количество ветвлений, условий, вложенных циклов, неуместная обработка исключений — всё это делает ваш код похожим на спагетти.
        // (метод на 1 экран)

        // ЛОДОЧНЫЙ ЯКОРЬ (BOAT ANCHOR) - ненужный код нужно сразу же удалять из проекта.
        // Причем делать это только после детального ревью всей системы при участии всей команды проекта.
        // В крайнем случае (при текущей интенсивной разработке) код можно закомментировать, но он никогда не должен попадать в актуальный релиз.

        // ПОТОК ЛАВЫ - «Волшебный» легаси код, который все используют, но никто не знает, как он работает
        // пытаться по возможности не делегировать одному программисту полностью разработку какой-либо задачи, а держать команду в курсе того, что делается.
        // Документировать решения и оставлять комментарии в коде тоже будет не лишним. 

        // ХАРД-КОД (ЖЕСТКОЕ КОДИРОВАНИЕ) - Добавление данных о среде и окружении в исходный код.
        // Чтобы этого избежать, вам стоит создавать специальные объекты для конфигурации, заполнять
        // их данными из какого-либо одного места (например, конфигурационного файла)

        // СОФТ-КОД (МЯГКОЕ КОДИРОВАНИЕ) - Нездоровое увлечение конфигурацией, стремление динамически настраивать в проекте всё и вся.
    }
}
